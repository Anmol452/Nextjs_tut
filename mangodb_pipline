import { getServerSession, User } from "next-auth";
import dbConnect from "@/lib/dbcon";
import UserModel from "@/model/user";
import { authOption } from "../auth/[...nextauth]/options";
import { GET } from "../accept-messages/route";
import { request } from "http";
import mongoose from "mongoose";

export async GET(request: Request){
    await dbConnect()

    const session = await getServerSession(authOption)
    const user: User = session?.user as User

    if (!session || !session.user) {
        return Response.json(
            {
                success: false,
                message: "Not Authenticated "
            },
            { status: 401 })
    }

    const userID = new mongoose.Types.ObjectId(user._id);


    try {
        //this is a pipline for left join
        const user = await UserModel.aggregate([
            { $match: { id: userID } },
            { $unwind: '$messages' },
            { $sort: { 'message.createdAt': -1 } },
            { $group: { _id: '$_id', message: { $push: '$messages' } } }

        ])

        if (!user || user.length === 0) {
            return Response.json(
                {
                    success: false,
                    message: "User Not Found "
                },
                { status: 401 })
        }


        return Response.json(
            {
                success: true,
                messages: user[0].messages
            },
            { status: 200 })

    } catch (error) {
            return Response.json(
            {
                success: false,
                message: "User Not Found "
            },
            { status: 500 })
    }
}
